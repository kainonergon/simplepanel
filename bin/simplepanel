#! /bin/dash
#
# simplepanel
#
# Simple panel script with lemonbar initially written for bspwm
# Inspired by limepanel https://github.com/Chrysostomus/limepanel
# Dash version

DELAY="0.01"	# delay needed for smooth panel update (due to lemonbar bug?)

# Kill any older panel processes

while [ $(pgrep -cx simplepanel) -gt 1 ] ; do pkill -ox -9 simplepanel ; done
while [ $(pgrep -cx lemonbar) -gt 0 ] ; do pkill -ox -9 lemonbar ; done

if ! [ -f "$HOME/.simplepanelrc" ] || [ "$1" = '--reset' ] ; then	# write default configuration file
    cat > "$HOME/.simplepanelrc"<<"_EOF_"
#!/bin/sh
#
# .simplepanelrc
#
# Configuration for simplepanel
# In order to reset configuration to defaults
# delete this file or use --reset option

# Set size and position

SP_WIDTH=""
SP_HEIGHT=24
SP_POSITION=""
SP_BOTTOM=""		# panel at the top of the screen
# SP_BOTTOM="-b"	# panel at the bottom of the screen

# Directory for temporary files

TMP="/tmp/simplepanel"

# Set fonts

SP_FONT_1="-xos4-terminus-medium-r-normal--18-*-*-*-*-*-iso10646-1"	# main font
SP_OFFSET_1=0
SP_FONT_2="Hack Nerd Font:pixelsize=16"	# iconic font
SP_OFFSET_2=0
SP_FONT_3="mono:pixelsize=16"	# extra font
SP_OFFSET_3=0

# SP_FONT_1="Hack Nerd Font:pixelsize=16"	# main font
# SP_OFFSET_1=-2
# SP_FONT_2="Hack Nerd Font:pixelsize=16"	# iconic font
# SP_OFFSET_2=-2
# SP_FONT_3="-misc-font logos-medium-r-normal--22-*-*-*-p-*-iso10646-1"	# extra font
# SP_OFFSET_3=0

# Nerd Font icon names. See https://github.com/ryanoasis/nerd-fonts/tree/master/bin/scripts/lib

i='' i_fa_bars=$i
i='' i_fa_window_maximize=$i
i='' i_fa_window_minimize=$i
i='' i_fa_window_restore=$i
i='' i_fa_close=$i
i='' i_fa_keyboard_o=$i
i='' i_fa_wifi=$i
i='' i_fa_battery_4=$i
i='' i_fa_battery_3=$i
i='' i_fa_battery_2=$i
i='' i_fa_battery_1=$i
i='' i_fa_battery_0=$i
i='' i_fa_plug=$i
i='' i_fa_sun_o=$i
i='' i_fa_clock_o=$i
i='' i_fa_calendar_o=$i
i='' i_fa_calendar=$i
i='' i_fa_volume_off=$i
i='' i_fa_volume_down=$i
i='' i_fa_volume_up=$i
i='' i_oct_mute=$i
i='' i_fae_sun_cloud=$i
i='' i_fa_ban=$i
i='' i_fa_lock=$i
i='' i_fa_circle_o_notch=$i
i='' i_fa_circle_o=$i
i='' i_fa_moon_o=$i
i='' i_fa_sign_out=$i
i='' i_fa_refresh=$i
i='' i_fa_power_off=$i
i='' i_fa_music=$i
i='' i_fa_backward=$i
i='' i_fa_play=$i
i='' i_fa_pause=$i
i='' i_fa_stop=$i
i='' i_fa_forward=$i

# Set colors and lemonbar format codes. See more at https://github.com/LemonBoy/bar
# Adapta dark

SP_BG_COLOR='#E8222D32'	# default background color

BC='%{B-}'		# use default background color
BC1='%{B#FF00BCD4}'	# use alternative background color / highlight

SP_FG_COLOR='#FFEFEFEF'	# default foreground color

FC='%{F-}'		# use default foreground color	- text
FC1='%{F#A03A464B}'	# use foreground color 1	- separator
FC2='%{F#FFCFD8DC}'	# use foreground color 2	- icons
FC3='%{F#FFA04020}'	# use foreground color 3	- urgent

ICO="${FC2}%{T2}"	# use icon color and font
TXT='%{F-}%{T1}'	# use text color and font

SP="%{O4}"		# small space

SEPARATOR="${SP}${FC1}%{R}%{O1}%{R}${FC}${SP}"
SEPARATOR_L="$SEPARATOR"

# SEPARATOR="${SP}%{T3}%{F#00000000}%{F-}%{T1}${SP}"
# SEPARATOR_L="${SP}%{T3}%{F#00000000}%{F-}%{T1}${SP}"

# SEPARATOR="${SP}%{T3}%{F#00000000}%{R}%{R}%{F-}%{T1}${SP}"
# SEPARATOR_L="${SP}%{T3}%{F#00000000}%{R}%{R}%{F-}%{T1}${SP}"

# Set panel structure
# Provide a string with a list of panel modules (blocks)
# Separate module names by spaces or newlines
# Modules will appear on the panel in the given order
# Add your own modules as you wish

sp_modules="
	sp_main_menu
	sp_separator_l
	sp_check_wm
	sp_title
	sp_right
	sp_button_close
	sp_separator
	sp_xkb
	sp_separator
	sp_mpd
	sp_separator
	sp_status
	sp_separator
	sp_button_exit
"
	# sp_button_minimize
	# sp_button_maximize
	# sp_padding
	# sp_center
	# sp_separator_l
	# sp_desktops
	# sp_bspwm

# Module definitions
# Every module gets its index as a positional parameter
# A module shoud print this index followed by : in the beginning of the line (echo "$1:some text")
# If contents of a module do not change (button, separator, etc.) it should print one line and exit
# If contents of a module change (window title, status line, etc.) it should print one line for every new value
# The panel updates every time any module prints a line
# Write your own modules as you wish

# Generic function that prints all module content in one echo command.
# It helps to avoid mixing outputs of different modules if they print at the same time.
# Module string is a newline separated list, which is printed ignoring newlines and tabs.
# Spaces are printed as normal characters.

print_module() {	# 2 parameters: module_index module_string
	IFS='
	'
	line="$1:"
	for i in $2; do
		line="$line$i"
	done
	echo "$line"
}

# formatting modules

sp_padding() {
	echo "$1:$SP"
}

sp_separator() {
	echo "$1:$SEPARATOR"
}

sp_separator_l() {
	echo "$1:$SEPARATOR_L"
}

sp_center() {
	echo "$1:%{c}"
}

sp_right() {
	echo "$1:%{r}"
}

# button modules

button() {	# generic button module; 5 parameters: module_index mouse_button_number command icon label
	print_module "$1" \
		"%{A$2:$3:}
			$ICO$4
			$TXT$5
		%{A$2}"
}

main_menu_cmd() {
	rofi	-show "drun" \
		-modi "drun" \
		-no-sidebar-mode \
		-theme-str "#window { location: northwest; width: 40ch; }" \
		-theme-str "#listview { lines: 20; dynamic: true; fixed-height: false; }"
	# rofimenu
}

sp_main_menu() {
	ICON=" ${i_fa_bars}${SP}"	# bars
	# ICON="${SP}%{F#FF35BF5C}%{T3}"	# Manjaro logo
	button	"$1" \
		"1" \
		"main_menu_cmd" \
		"$ICON" \
		""
}

sp_button_minimize() {
	button	"$1" \
		"1" \
		"whid hide" \
		"${SP}${i_fa_window_minimize}" \
		""
}

sp_button_maximize() {
	button	"$1" \
		"1" \
		"bspc desktop -l next" \
		"${SP}${i_fa_window_maximize}" \
		""
}

sp_button_close() {
	button	"$1" \
		"1" \
		"xdotool getactivewindow windowclose" \
		"${SP}${i_fa_close}" \
		""
}

# generic menu with rofi

rofi_cmd() {	# 1 parameter: menu_width. The rest of parameters is passed to rofi
	menu_width="$1"	# width in pixels
	shift
	eval "$(xdotool search --limit 1 --maxdepth 0 --class '' getwindowgeometry --shell)"	# get screen size
	eval "$(xdotool getmouselocation --shell)"

	if [ $X -lt $(( $WIDTH - $menu_width )) ] ; then
		x_anchor="west"
	else
		x_anchor="east"
		X="$WIDTH"
	fi

	if [ "$SP_BOTTOM" ] ; then	# panel at the bottom
		y_anchor="south"
		Y="$(( $HEIGHT - $SP_HEIGHT ))"
	else				# panel at the top
		y_anchor="north"
		Y="$SP_HEIGHT"
	fi

	rofi $@ \
		-i \
		-no-custom \
		-theme-str "
			#window {
				location: northwest;
				anchor: $y_anchor$x_anchor;
				x-offset: $X;
				y-offset: $Y;
				width: $menu_width;
				}
			#listview {
				fixed-height: false;
				scrollbar: false;
			}"
}

# Menu list string format: each menu item begins with label, then semicolon, content, new line (or tab)
# "label_1:content_1
# label_2:content_2"
# Labels are shown in the menu. Content of the selected item goes to stdout

rofi_menu() { # 3 parameters: menu_title menu_width menu_list
	menu_title="$1"
	menu_width="$2"
	menu_list="$3"

	IFS='
	'
	for line in $menu_list ; do
		echo "${line%%:*}"
	done \
	| rofi_cmd "$menu_width" -dmenu -p "$menu_title" \
	| {	read choice
		for line in $menu_list ; do
			if [ "$choice" = "${line%%:*}" ] ; then
				echo "${line#*:}"
				break
			fi
		done
	}
}

# exit button with rofi menu

rofi_exit() {
	eval $(rofi_menu "Exit:" 160 \
		"$i_fa_ban cancel:true
		$i_fa_lock lock:screenlock
		$i_fa_circle_o suspend:systemctl suspend
		$i_fa_moon_o hibernate:systemctl hibernate
		$i_fa_sign_out logout:xdotool key --clearmodifiers super+shift+q
		$i_fa_refresh reboot:systemctl reboot
		$i_fa_power_off poweroff:systemctl poweroff")
}

sp_button_exit() {
	button	"$1" \
		"1" \
		"rofi_exit" \
		"${SP}${FC3}${i_fa_power_off}${SP}" \
		""
}

# module that checks if bspwm or desktops module to use

sp_check_wm() {
	for i in {1..10} ; do
		wmname="$(wmctrl -m | sed -n '/Name: /s///p')"
		[ "$wmname" ] && break
		sleep 0.5
	done
	if [ -z "$wmname" ] ; then
		print_module "$1" "no wm detected"
		exit
	fi
	case "$wmname" in
		bspwm)	sp_bspwm "$1" & ;;
		*)	sp_desktops "$1" & ;;
	esac
}

# bspwm module

bspc_next() {	# focus next occupied desktop
	bspc desktop -f next.occupied
}

bspc_prev() {	# focus previous occupied desktop
	bspc desktop -f prev.occupied
}

bspc_last()	{	# focus last focused desktop
	bspc desktop -f last
}

bspc_focus() {	# focus desktop; 1 parameter: desktop
	bspc desktop -f "$1"
}

bspc_layout() {	# switch to the next layout (tiling or monocle)
	bspc desktop -l next
}

sp_bspwm() {
	if ! which bspc > /dev/null 2>&1 ; then	# check if bspwm is installed
		print_module "$1" "no bspwm"
		exit
	fi
	i=10
	while ! bspc wm -g > /dev/null 2>&1 && [ $i -gt 0 ] ; do	# wait while bspwm starts
		sleep 0.5
		i=$(( $i-1 ))
	done
	if [ $i -eq 0 ] ; then
		print_module "$1" "no bspwm"
		exit					# exit if bspwm does not respond
	fi
	pkill -x bspc >/dev/null 2>&1

	ICON_TIL="${SP}${i_fa_window_restore}"
	ICON_MON="${SP}${i_fa_window_maximize}%{O1}"

	module_index=$1

	bspc subscribe \
	| {	while read line ; do
			bspwm_line=""
			IFS=':'
			for entry in $line ; do
				desktop="${entry#?}"
				case "$entry" in
					O*|F*|U*)	# highlight focused desktop (occupied, free or urgent)
						bspwm_line="${bspwm_line}%{A1:bspc_last:}${BC1}${SP}${desktop}${SP}${BC}%{A1}" ;;
					o*|u*)		# show unfocused desktops (occupied or urgent)
						bspwm_line="${bspwm_line}%{A1:bspc_focus ${desktop}:}${SP}${desktop}${SP}%{A1}" ;;
					L*)		# show current layout (tiling or monocle)
						case "${desktop}" in
							T)	layout_ind="${ICO}${ICON_TIL}${TXT}" ;;
							M)	layout_ind="${ICO}${ICON_MON}${TXT}" ;;
							*)	layout_ind="${SP}${desktop}${SP}" ;;
						esac
						bspwm_line="${bspwm_line}%{A1:bspc_layout:}${SEPARATOR_L}${layout_ind}%{A1}" ;;
				esac
			done
			print_module "$module_index" \
				"%{A4:bspc_next:}
					%{A5:bspc_prev:}
						$bspwm_line
					%{A5}
				%{A4}"
		done
	}
}

# desktops module for EWMH/NetWM compatible X Window Manager
# tested with bspwm, jwm, icewm, pekwm, hlwm, openbox, blackbox, fluxbox, awesome, xfwm4

dt_next() {
	xdotool set_desktop --relative 1
}

dt_prev() {
	xdotool set_desktop --relative -- -1
}

dt_set() {
	xdotool set_desktop $1
}

sp_desktops() {
	pkill -x xprop >/dev/null 2>&1
	NL='
'
	module_index="$1"
	# check what X properties are supported by wm
	xprop_list="_NET_NUMBER_OF_DESKTOPS \
		_WIN_WORKSPACE_COUNT \
		_NET_CURRENT_DESKTOP \
		_WIN_WORKSPACE \
		_NET_DESKTOP_NAMES \
		_WIN_WORKSPACE_NAMES \
		_NET_ACTIVE_WINDOW"
	xprop_query=""
	for prop in $xprop_list ; do
		{ xprop -root -notype _NET_SUPPORTED _WIN_PROTOCOLS 2>/dev/null | grep -q -s "$prop" 2>/dev/null; } && xprop_query="$xprop_query $prop"
	done
	dt_max_num=1
	dt_current=0
	dt_names=""	
	xprop -spy -root -notype $xprop_query 2>/dev/null \
	| while unset IFS; read xprop_name eq_sign xprop_value; do
		case "$xprop_name" in
			_NET_NUMBER_OF_DESKTOPS|\
			_WIN_WORKSPACE_COUNT)
				dt_max_num="$xprop_value" ;;
			_NET_CURRENT_DESKTOP|\
			_WIN_WORKSPACE)
				dt_current="$xprop_value" ;;
			_NET_DESKTOP_NAMES|\
			_WIN_WORKSPACE_NAMES)
				dt_names=""
				i=1
				IFS=','
				for dt in $xprop_value ; do
					dt="${dt#*\"}"; dt="${dt%\"}"	# remove ""
					[ "$dt" ] || dt="$i"	# use number (starting from 1) if name is not set
					dt_names="$dt_names$dt$NL"
					i=$(($i+1))
				done ;;
		esac
		IFS="$NL"
		set -- $dt_names
		dt_line=""
		dt_number=0
		while [ $dt_number -lt $dt_max_num ] ; do
			dt="$1"
			[ "$dt" ] || dt="$(($dt_number+1))"	# use number (starting from 1) if there are more desktops than names
			if [ $dt_number -eq $dt_current ] ; then
				dt_line="${dt_line}${BC1}${SP}${dt}${SP}${BC}"
			else	# check if desktop is occupied
				if [ $(xdotool search --desktop $dt_number --limit 1 --class "") ] ; then
					dt_line="${dt_line}%{A1:dt_set $dt_number:}${SP}${dt}${SP}%{A1}"
				fi
			fi
			dt_number=$(($dt_number+1))
			[ $# -gt 0 ] && shift
		done
		print_module "$module_index" \
			"%{A4:dt_next:}
				%{A5:dt_prev:}
					${dt_line}
				%{A5}
			%{A4}"
	done
}

# title module

title_cmd() {
	rofi_cmd "500" -modi windowcd -show windowcd -display-windowcd "Window:" -no-sidebar-mode
}

sp_title() {
	if ! which xtitle > /dev/null ; then		# check if xtitle is installed
		print_module "$1" "no xtitle"
		exit
	fi
	pkill -x xtitle >/dev/null 2>&1

	FORMAT="${1}:%{A1:title_cmd:} %s%{A1}\n"

	xtitle -s -t -70 -f "$FORMAT"
}

# keyboard layout indicator module

xkb_next() {
	xkb-switch -n	# switch to the next layout
}

sp_xkb() {
	if ! which xkb-switch > /dev/null ; then	# check if xkb-switch is installed
		print_module "$1" "no xkb-switch"
		exit
	fi
	pkill -x xkb-switch >/dev/null 2>&1

	ICON=""
	# ICON="${SP}${i_fa_keyboard_o}"

	while true; do
		print_module "$1" \
			"%{A1:xkb_next:}
				$ICO$ICON
				$TXT$(xkb-switch)
			%{A1}"
		xkb-switch -w	# wait for layout change
	done
}

# mpd panel module

mpd_hide_song_toggle() {
	toggle_flag "mpd_hide_song"
	mpc sendmessage update now
}

mpd_menu() {
	mpc playlist \
	| rofi_cmd 400 -format d -dmenu -p "Play:" \
	| xargs mpc play
}

sp_mpd() {
	ICON_MPD="${SP}${i_fa_music}${SP}"
	ICON_PREV=" ${i_fa_backward}"
	ICON_NEXT=" ${i_fa_forward}"
	ICON_PLAY=" ${i_fa_play}%{O1}"
	ICON_PAUSE=" ${i_fa_pause}"
	MAX_LENGTH=20

	pkill -x mpc >/dev/null 2>&1	# prevent spawning mpc on panel restart

	while true ; do
		if mpc > /dev/null 2>&1 ; then	# check if mpd is running
			echo "start"				# force update on panel start
			mpc idleloop player &		# get updates on player events
			while mpc waitmessage update ; do true ; done	# get updates on messages
		fi \
		| while read line ; do
			if check_flag "mpd_hide_song" ; then
				song="…"
			else
				song="$(mpc current)"
				if [ ${#song} -gt $MAX_LENGTH ] ; then	# trim long names
					song="$(echo $song|cut -c -$MAX_LENGTH)…"
				fi
			fi
			state="$(mpc|sed -n '2s/ .*$//p')"
			if [ "$state" = "[playing]" ] ; then
				icon_toggle="$ICON_PAUSE"
			else
				icon_toggle="$ICON_PLAY"
			fi

			print_module "$1" \
				"%{A1:mpd_hide_song_toggle:}
					%{A3:mpd_menu:}
						$ICO$ICON_MPD
						$TXT$song
					%{A3}
				%{A1}
				%{A1:mpc prev:}
					$ICO$ICON_PREV
				%{A1}
				%{A1:mpc toggle:}
					$icon_toggle
				%{A1}
				%{A1:mpc next:}
					$ICON_NEXT
				%{A1}"
		done
		# mpd does not respond, show (re)start button
		button	"$1" \
			"1" \
			"killall -q mpd mpc; mpd" \
			"$ICON_MPD" \
			"(re)start mpd"
		until mpc > /dev/null 2>&1 ; do	# wait until mpd starts
			sleep $UPD_INT
		done
	done
}

# Modules for status line do not loop
# They can be combined into one status line that updates every $UPD_INT seconds
# First positional parameter is module index
# Modules for status line do not print their module index
# If the index is redirected to "${TMP}/update_status_now" the module updates at once (e.g. volume change)

# Set status line structure

sp_status_modules="
	sp_status_volume
	sp_status_separator
	sp_status_backlight
	sp_status_separator
	sp_status_battery
	sp_status_separator
	sp_status_wifi
	sp_status_separator
	sp_status_weather
	sp_status_separator
	sp_status_clock
"

# general purpose functions to use in status line modules

print_status_module() {	# 1 parameter: module_string
	IFS='
	'
	line=""
	for i in $1; do
		line="$line$i"
	done
	echo "$line"
}

update_now() {	# 1 parameter: module_index
	echo "$1" > "${TMP}/update_status_now"
}

toggle_flag() {	# 1 parameter: flag_name
	if [ -f "${TMP}/${1}" ] ; then
		rm "${TMP}/${1}"
	else
		touch "${TMP}/${1}"
	fi
}

check_flag() {	# 1 parameter: flag_name
	[ -f "${TMP}/${1}" ]
}

print_vbar() {	# vertical bar, from 0 to 100; 1 parameter: vbar_level
	case "$(( $1 / 11 ))" in
		9)	echo '█' ;;
		8)	echo '█' ;;
		7)	echo '▇' ;;
		6)	echo '▆' ;;
		5)	echo '▅' ;;
		4)	echo '▄' ;;
		3)	echo '▃' ;;
		2)	echo '▂' ;;
		1)	echo '▁' ;;
		*)	echo ' ' ;;
	esac
}

# formatting modules for status line

sp_status_separator() {
	echo "$SEPARATOR"
}

# wifi module for status line

show_wifi_toggle() {	# 1 parameter: module index
	toggle_flag "show_wifi"
	update_now "$1"
}

wifi_menu() {
	networkmanager_dmenu
}

sp_status_wifi() {
	# ICON="${SP}${i_fa_wifi}${SP}"
	ICON=""

	# get wireless interface name
	wifi_int="$(ip link show | awk '/state UP/ {print substr($2, 1, length($2)-1)}')"

	if [ -d /sys/class/net/${wifi_int}/wireless ] && [ "$(cat /sys/class/net/${wifi_int}/operstate)" != 'down' ] ; then
		wifi_quality=$(awk 'NR==3 {print int($3 * 100 / 70)}' /proc/net/wireless)
		case $(( $wifi_quality / 20 )) in
			5|4)	label="${FC2}▂▄▆█${FC}" ;;
			3)		label="${FC2}▂▄▆_${FC}" ;;
			2)		label="${FC2}▂▄__${FC}" ;;
			1)		label="${FC3}▂___${FC}" ;;
			*)		label="${FC3}____${FC}" ;;
		esac

		# check if wifi name should be shown
		if check_flag "show_wifi" && which iwgetid > /dev/null ; then
			wifi_name="$(iwgetid -r)"
			label="${label}${SP}${wifi_name}"
		fi
	else
		label="no wifi"
	fi
	
	print_status_module \
		"%{A1:show_wifi_toggle $1:}
			%{A3:wifi_menu:}
				$ICO$ICON
				$TXT$label
			%{A3}
		%{A1}"
}

# sound volume module for status line

volume_get_level() {
	amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p' | head -n 1
}

volume_get_state() {
	amixer get Master | sed -n 's/^.*\[\(o[nf]\+\).*$/\1/p' | head -n 1
}

volume_toggle() {			# 1 parameter: module index
	amixer set Master toggle
	update_now "$1"
}

volume_mixer() {
	terminal -e alsamixer
}

volume_up() {				# 1 parameter: module index
	amixer set Master 5%+
	update_now "$1"
}

volume_down() {			# 1 parameter: module index
	amixer set Master 5%-
	update_now "$1"
}

sp_status_volume() {
	if ! which amixer > /dev/null ; then		# chech if amixer is installed
		print_status_module "no amixer"
		exit
	fi

	ICON_MUTE="%{O1}${i_oct_mute}${SP}"
	ICON_LOW="%{O-2}${i_fa_volume_off}%{O8}${SP}"
	ICON_MED="%{O-1}${i_fa_volume_down}%{O5}${SP}"
	ICON_HIGH="%{O2}${i_fa_volume_up}${SP}"

	volume_level="$(volume_get_level)"
	case $(( $volume_level / 30 )) in
		0)		icon="$ICON_LOW" ;;
		1)		icon="$ICON_MED" ;;
		*)		icon="$ICON_HIGH" ;;
	esac
	
	# check if sound is mute
	if [ "$(volume_get_state)" = "off" ] ; then
		icon="$ICON_MUTE"
	fi

	print_status_module \
		"%{A1:volume_toggle $1:}
			%{A3:volume_mixer:}
				%{A4:volume_up $1:}
					%{A5:volume_down $1:}
						$ICO$icon
						$(print_vbar $volume_level)
					%{A5}
				%{A4}
			%{A3}
		%{A1}"
}

# backlight module for status line

backlight_get_level() {
	set -- /sys/class/backlight/*
	echo "$(( 100 * $(cat ${1}/actual_brightness) / $(cat ${1}/max_brightness) ))"
}

backlight_down() {	# 1 parameter: module index
	if [ "$(backlight_get_level)" -gt 10 ] ; then		# make sure backlight is not too low
		if which light > /dev/null ; then		# check if light is installed
			light -U 2
		elif which xbacklight > /dev/null ; then	# check if xbacklight is installed
			xbacklight -time 20 -steps 2 -2
		else
			exit
		fi
		update_now "$1"
	fi
}

backlight_up() {	# 1 parameter: module index
	if which light > /dev/null ; then		# check if light is installed
		light -A 2
	elif which xbacklight > /dev/null ; then	# check if xbacklight is installed
		xbacklight -time 20 -steps 2 +2
	else
		exit
	fi
	update_now "$1"
}

backlight_menu() {	# 1 parameter: module index
	rofi_menu " ${i_fa_sun_o}" 80 \
		"100%:100
		 75%:75
		 50%:50
		 25%:25
		  5%:5" \
	| xargs light -S
	update_now "$1"
}

sp_status_backlight() {
	ICON="${SP}${i_fa_sun_o}${SP}"

	if [ -z "$(ls /sys/class/backlight/)" ] ; then	# no backlight
		print_status_module "no backlight"
		exit
	fi

	backlight_level="$(backlight_get_level)"
	
	print_status_module \
		"%{A1:backlight_menu $1:}
			%{A4:backlight_up $1:}
				%{A5:backlight_down $1:}
					$ICO$ICON
					$(print_vbar $backlight_level)
				%{A5}
			%{A4}
		%{A1}"
}

# battery module for status line

battery_cmd() {
	xfce4-power-manager -c
}

sp_status_battery()
{
	ICON_0="${FC3}${SP}${i_fa_battery_0}"	# empty
	ICON_1="${FC3}${SP}${i_fa_battery_1}"	# almost empty
	ICON_2="${SP}${i_fa_battery_2}"			# half
	ICON_3="${SP}${i_fa_battery_3}"			# almost full
	ICON_4="${SP}${i_fa_battery_4}"			# full
	ICON_C="${SP}${i_fa_plug}%{O2}"			# charging

	if !  [ -e /sys/class/power_supply/BAT*/ ] ; then
		exit
	fi

	battery_cap="$(cat /sys/class/power_supply/BAT*/capacity)"
	battery_stat="$(cat /sys/class/power_supply/BAT*/status)"

	if [ "$battery_stat" = "Charging" ] ; then
		icon="$ICON_C"
		label="${SP}${battery_cap}%"
	else
		case $(( ${battery_cap} / 21 )) in
			0)	icon="$ICON_0" ;;
			1)	icon="$ICON_1" ;;
			2)	icon="$ICON_2" ;;
			3)	icon="$ICON_3" ;;
			4)	icon="$ICON_4" ;;
		esac
		if [ "$battery_cap" -lt 97 ] ; then
			label="${SP}${battery_cap}%"
		else
			label=""
		fi
	fi
	
	print_status_module \
		"%{A1:battery_cmd:}
			$ICO$icon
			$TXT$label
		%{A1}"
}

# weather module for status line

weather_notify() {	# 1 parameter: location
	notify-send -i "weather-clouds" "Weather" "$(weather-report -qm $1)"
}

sp_status_weather() {
#	ICON="${SP}${i_fae_sun_cloud}${SP}"
	ICON=""
	LOCATION="mmmm"	# See `man weather` about location
	
	label="$(weather-report -qm --headers='Temperature' $LOCATION | sed 's/^.*: //;s/ C$/°C/')"

	print_status_module \
		"%{A1:weather_notify $LOCATION:}
			$ICO$ICON
			$TXT$label
		%{A1}"
}

# clock module for status line

show_date_toggle() {	# 1 parameter: index module
	toggle_flag "show_date"
	update_now "$1"
}

calendar_notify() {
	notify-send \
		-i calendar \
		"$(date)" \
		"$(cal --color=always \
			| sed 's/\x1b\[7m/<b><span background=\"#00BCD4\">/;s/\x1b\[27m/<\/span><\/b>/;s/\t//g')"
}

sp_status_clock() {
	# ICON_TIME="${SP}${i_fa_clock_o}${SP}"
	ICON_TIME=""
	# ICON_DATE="${SP}${i_fa_calendar_o}${SP}"
	ICON_DATE=""

	# check if date should be shown
	if check_flag "show_date" ; then
		date_string="
			$ICO$ICON_DATE
			$TXT$(date '+%x')
			${SEPARATOR}"
	else
		date_string=""
	fi

	print_status_module \
		"%{A1:show_date_toggle $1:}
			%{A3:calendar_notify:}
				$date_string
				$ICO$ICON_TIME
				$TXT$(date '+%R')
			%{A3}
		%{A1}"
}
_EOF_
fi

. "$HOME/.simplepanelrc" ;  # read configuration file

######################
# status line module #
######################

UPD_INT=3	# update interval (in seconds) for status line

sp_status() {
	status_line_index="$1"

	# create fifo for status line updates

	if [ -e "${TMP}/update_status_now" ] ; then
		rm "${TMP}/update_status_now"
	fi
	mkfifo "${TMP}/update_status_now"
	
	IFS='
	'
	while true ; do					# start timed status line update
		echo "all" > "${TMP}/update_status_now" || break
		sleep "$UPD_INT"
	done &

	while read index < "${TMP}/update_status_now"; do
		status_line="$status_line_index:"
		if [ $index = "all" ] ; then	# update all status modules
			sp_status_values=""
			i=0
			for status_module in $sp_status_modules ; do
				value="$($status_module $i)"
				sp_status_values="${sp_status_values}${value}${IFS}"	# store the value
				status_line="${status_line}${value}"			# add the value to the status line
				i=$(( $i+1 ))
			done
		else				# update one status module
			set -- $sp_status_modules
			shift $index
			new_value="$($1 $index)"
			set -- $sp_status_values
			i=0
			sp_status_values=""
			while [ $# -gt 0 ] ; do			# read the old values
				if [ $i -eq $index ] ; then
					value="$new_value"	# replace the value that updates
				else
					value="$1"		# keep all other values
				fi
				sp_status_values="${sp_status_values}${value}${IFS}"	# store the value
				status_line="$status_line$value"			# add the value to the status line
				i=$(( $i+1 ))
				shift							# remove old stored value
			done
		fi
		echo "$status_line"
	done
}

##########
## MAIN ##
##########


#### INITIALIZE PANEL ####

# clear directory for temporary files

rm -rf "$TMP"
mkdir "$TMP"

# set initial empty values

for module in $sp_modules ; do
	sp_values="$sp_values 
" ;
done ;

# handle panel exit

trap \
"rm -rf $TMP ; \
bspc config top_padding -$gap" \
EXIT INT QUIT TERM

# start modules in the background and pipe them to the panel

index=0
for module in $sp_modules ; do
	eval "$module $index" &
	index=$(( $index+1 ))
	sleep "${DELAY}"
done \
| {	#### UPDATE PANEL ####
	IFS='
'					# IFS needed to preserve initial and final spaces
	while read line ; do		# update panel every time a module prints a line
		index="${line%%:*}"	# get index of the module that needs update
		new_value="${line#*:}"	# get new value of the module that needs update
		set -- $sp_values	# set positional parameters to the old values
		sp_values=""		# initial set of new values
		panel_line=""
		i=0
		while [ $# -gt 0 ] ; do			# read the old values
			if [ $i -eq $index ] ; then
				value="$new_value"	# replace the value that updates
			else
				value="$1"		# keep all other values
			fi
			sp_values="$sp_values$value$IFS"	# store the new value
			panel_line="$panel_line$value"		# and add it to the panel line
			i=$(( $i+1 ))
			shift
		done
		echo "$panel_line"	# print the panel line to update lemonbar
		sleep "$DELAY"
	done ; } \
| lemonbar \
	-a 50 \
	-g "${SP_WIDTH}x${SP_HEIGHT}${SP_POSITION}" \
	-f "$SP_FONT_1" -o "$SP_OFFSET_1" \
	-f "$SP_FONT_2" -o "$SP_OFFSET_2" \
	-f "$SP_FONT_3" -o "$SP_OFFSET_3" \
	-B "$SP_BG_COLOR" \
	-F "$SP_FG_COLOR" \
	"$SP_BOTTOM" \
| while read line ; do
	eval "$line"	# execute commands for clickable areas of lemonbar
done
